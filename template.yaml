AWSTemplateFormatVersion: "2010-09-09"
Description: Practice 1
Transform:
  - AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs14.x
    Timeout: 30
    MemorySize: 1024
    Environment:
      Variables:
        USERNAME: Jordi
        NODE_OPTIONS: --enable-source-maps
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  HelloWorldLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-hello-world-lambda'
      Handler: helloWorld.handler
      CodeUri: dist/practice1
      Role: !GetAtt LambdaExecutionRole.Arn


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-BasicLambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  Dynamodb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-dynamodb-table'
      AttributeDefinitions:
        - AttributeName: id #Partition key
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaWriteDynamodbRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaWriteDynamodbRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LambdaWriteDynamodbPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt Dynamodb.Arn

  LambdaReadDynamodbRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaReadDynamodbRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LambdaReadDynamodbPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt Dynamodb.Arn

  LambdaDeleteDynamodbRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaDeleteDynamodbRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LambdaDeleteDynamodbPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt Dynamodb.Arn

  PutLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-put-dynamodb-lambda'
      Handler: put.handler
      CodeUri: dist/practice2
      Role: !GetAtt LambdaWriteDynamodbRole.Arn

  GetLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-get-dynamodb-lambda'
      Handler: get.handler
      CodeUri: dist/practice2
      Role: !GetAtt LambdaReadDynamodbRole.Arn

  DeleteLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-delete-dynamodb-lambda'
      Handler: delete.handler
      CodeUri: dist/practice2
      Role: !GetAtt LambdaDeleteDynamodbRole.Arn

  EventBridge:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub '${AWS::StackName}-event-bridge'

  PlayerOneRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'player-one-rule'
      EventBusName: !GetAtt EventBridge.Arn
      EventPattern:
        source:
          - 'player2'
      Name: !Sub '${AWS::StackName}-player-one-rule'
      State: ENABLED
      Targets:
        - Arn: !GetAtt PlayerOneLambda.Arn
          Id: 'PlayerOneLambda'

  PlayerTwoRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'player-two-rule'
      EventBusName: !GetAtt EventBridge.Arn
      EventPattern:
        source:
          - 'player1'
      Name: !Sub '${AWS::StackName}-player-two-rule'
      State: ENABLED
      Targets:
        - Arn: !GetAtt PlayerTwoLambda.Arn
          Id: 'PlayerTwoLambda'

  PermissionForEventPlayerOne:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "PlayerOneLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt PlayerOneRule.Arn

  PermissionForEventPlayerTwo:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "PlayerTwoLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt PlayerTwoRule.Arn

  PlayerOneLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-player-one-lambda'
      Handler: playerOne.handler
      CodeUri: dist/practice3
      Runtime: nodejs12.x
      Policies:
          - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents

  PlayerTwoLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-player-two-lambda'
      Handler: playerTwo.handler
      CodeUri: dist/practice3
      Runtime: nodejs12.x
      Policies:
          - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents